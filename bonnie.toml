version="0.3.1"

[scripts]
## Builds Tailwind CSS for development (no purging)
build-tailwind-dev = [
    "cd frontend",
    "tailwindcss -c ./tailwind.config.js -o ./tailwind.css"
]
## Builds Tailwind CSS for production (maximum purging and minification)
build-tailwind-prod = [
    "cd frontend",
    "NODE_ENV=production tailwindcss -c ./tailwind.config.js -o ./tailwind.css --minify"
]
## Generates a JWT secret and writes it to `.env.local`
setup.subcommands.jwt-secret.generic = "echo \"JWT_SECRET=$(openssl rand -base64 256 | tr -d '\n' )\" > backend/.env.local"
setup.subcommands.jwt-secret.targets.windows = [
    "echo \"This command is only supported on Unix.\"",
    "exit 1"
]
## Builds Tailwind CSS for development usage
setup.subcommands.tailwind = "bonnie build-tailwind-dev"
setup.subcommands.prompt-tailwind = "echo \"Have you installed the Tailwind CLI globally with 'npm i -g tailwindcss' or 'yarn global add tailwindcss'?\""
setup.order = """
jwt-secret {
    Success => tailwind {
        Failure => prompt-tailwind
    }
}
"""

## Builds everything
build.cmd = "cargo build"
## Builds the frontend
build.subcommands.frontend = [
	"cd frontend",
    "bonnie build-tailwind-prod",
	"cargo build"
]
## Builds the backend
build.subcommands.backend = [
	"cd backend",
	"cargo build"
]
## Runs the frontend, watching for changes (uses Trunk)
## Tailwind is assumed to be set up after `setup`
run.subcommands.frontend = [
    "cd frontend",
    "trunk serve"
]
## Runs the backend, watching for changes
run.subcommands.backend = "cargo watch -x \"run --bin backend-bin\""
## Tests everything
test.cmd = "cargo watch -x \"test\""
## Tests the frontend, watching for changes
test.subcommands.frontend = [
	"cd frontend",
	"cargo watch -x \"test\""
]
## Tests the backend, watching for changes
test.subcommands.backend = [
	"cd backend",
	"cargo watch -x \"test\""
]
## Checks everything for tests, formatting, etc.
check = "cargo check && cargo fmt -- --check && cargo clippy && cargo test" # This will be run on CI as well
## Releases a new version to GitHub
release = "standard-version --sign --commit-all && git push --follow-tags origin main"
